%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.0
-module(message).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("message.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'RawMessage'() :: #'RawMessage'{}.

-type 'Message'() :: #'Message'{}.

-export_type(['RawMessage'/0, 'Message'/0]).

-spec encode_msg(#'RawMessage'{} | #'Message'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'RawMessage'{} | #'Message'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'RawMessage'{} | #'Message'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'RawMessage' ->
	  encode_msg_RawMessage(id(Msg, TrUserData), TrUserData);
      'Message' ->
	  encode_msg_Message(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_RawMessage(Msg, TrUserData) ->
    encode_msg_RawMessage(Msg, <<>>, TrUserData).


encode_msg_RawMessage(#'RawMessage'{'Channel' = F1,
				    'Publisher' = F2, 'Protocol' = F3,
				    'ContentType' = F4, 'Payload' = F5},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     case iolist_size(TrF5) of
	       0 -> B4;
	       _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
	     end
	   end
    end.

encode_msg_Message(Msg, TrUserData) ->
    encode_msg_Message(Msg, <<>>, TrUserData).


encode_msg_Message(#'Message'{'Channel' = F1,
			      'Publisher' = F2, 'Protocol' = F3, 'Name' = F4,
			      'Unit' = F5, 'Value' = F6, 'StringValue' = F7,
			      'BoolValue' = F8, 'DataValue' = F9,
			      'ValueSum' = F10, 'Time' = F11,
			      'UpdateTime' = F12, 'Link' = F13},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false ->
			e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0.0 -> B5;
		     true ->
			 e_type_double(TrF6, <<B5/binary, 49>>, TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  case is_empty_string(TrF7) of
		    true -> B6;
		    false ->
			e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= false -> B7;
		     true -> e_type_bool(TrF8, <<B7/binary, 64>>, TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  case is_empty_string(TrF9) of
		    true -> B8;
		    false ->
			e_type_string(TrF9, <<B8/binary, 74>>, TrUserData)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= 0.0 -> B9;
		      true ->
			  e_type_double(TrF10, <<B9/binary, 81>>, TrUserData)
		   end
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   if TrF11 =:= 0.0 -> B10;
		      true ->
			  e_type_double(TrF11, <<B10/binary, 89>>, TrUserData)
		   end
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   if TrF12 =:= 0.0 -> B11;
		      true ->
			  e_type_double(TrF12, <<B11/binary, 97>>, TrUserData)
		   end
		 end
	  end,
    if F13 == undefined -> B12;
       true ->
	   begin
	     TrF13 = id(F13, TrUserData),
	     case is_empty_string(TrF13) of
	       true -> B12;
	       false ->
		   e_type_string(TrF13, <<B12/binary, 106>>, TrUserData)
	     end
	   end
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('RawMessage', Bin, TrUserData) ->
    id(decode_msg_RawMessage(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Message', Bin, TrUserData) ->
    id(decode_msg_Message(Bin, TrUserData), TrUserData).



decode_msg_RawMessage(Bin, TrUserData) ->
    dfp_read_field_def_RawMessage(Bin, 0, 0,
				  id(0, TrUserData), id(0, TrUserData),
				  id([], TrUserData), id([], TrUserData),
				  id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_RawMessage(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_RawMessage_Channel(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_RawMessage(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_RawMessage_Publisher(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_RawMessage(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_RawMessage_Protocol(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_RawMessage(<<34, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_RawMessage_ContentType(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_RawMessage(<<42, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_RawMessage_Payload(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_RawMessage(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, _) ->
    #'RawMessage'{'Channel' = F@_1, 'Publisher' = F@_2,
		  'Protocol' = F@_3, 'ContentType' = F@_4,
		  'Payload' = F@_5};
dfp_read_field_def_RawMessage(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_RawMessage(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_RawMessage(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RawMessage(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_RawMessage(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RawMessage_Channel(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      16 ->
	  d_field_RawMessage_Publisher(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      26 ->
	  d_field_RawMessage_Protocol(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_field_RawMessage_ContentType(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      42 ->
	  d_field_RawMessage_Payload(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RawMessage(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_RawMessage(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    2 ->
		skip_length_delimited_RawMessage(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_RawMessage(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_RawMessage(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData)
	  end
    end;
dg_read_field_def_RawMessage(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, _) ->
    #'RawMessage'{'Channel' = F@_1, 'Publisher' = F@_2,
		  'Protocol' = F@_3, 'ContentType' = F@_4,
		  'Payload' = F@_5}.

d_field_RawMessage_Channel(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_RawMessage_Channel(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_RawMessage_Channel(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_RawMessage(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_RawMessage_Publisher(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_RawMessage_Publisher(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_RawMessage_Publisher(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_RawMessage(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_RawMessage_Protocol(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_RawMessage_Protocol(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_RawMessage_Protocol(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RawMessage(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, F@_5, TrUserData).

d_field_RawMessage_ContentType(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_RawMessage_ContentType(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_RawMessage_ContentType(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RawMessage(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, F@_5, TrUserData).

d_field_RawMessage_Payload(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_RawMessage_Payload(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_RawMessage_Payload(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_RawMessage(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, NewFValue, TrUserData).

skip_varint_RawMessage(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_RawMessage(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
skip_varint_RawMessage(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_RawMessage(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_RawMessage(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_RawMessage(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
skip_length_delimited_RawMessage(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RawMessage(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_group_RawMessage(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RawMessage(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_32_RawMessage(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_RawMessage(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_64_RawMessage(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_RawMessage(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

decode_msg_Message(Bin, TrUserData) ->
    dfp_read_field_def_Message(Bin, 0, 0, id(0, TrUserData),
			       id(0, TrUserData), id([], TrUserData),
			       id([], TrUserData), id([], TrUserData),
			       id(0.0, TrUserData), id([], TrUserData),
			       id(false, TrUserData), id([], TrUserData),
			       id(0.0, TrUserData), id(0.0, TrUserData),
			       id(0.0, TrUserData), id([], TrUserData),
			       TrUserData).

dfp_read_field_def_Message(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_Channel(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_Publisher(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_Protocol(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_Name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<42, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_Unit(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<49, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_Value(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<58, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_StringValue(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<64, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_BoolValue(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<74, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_DataValue(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<81, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_ValueSum(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<89, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_Time(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<97, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_UpdateTime(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<106, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_Message_Link(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, TrUserData);
dfp_read_field_def_Message(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, _) ->
    #'Message'{'Channel' = F@_1, 'Publisher' = F@_2,
	       'Protocol' = F@_3, 'Name' = F@_4, 'Unit' = F@_5,
	       'Value' = F@_6, 'StringValue' = F@_7,
	       'BoolValue' = F@_8, 'DataValue' = F@_9,
	       'ValueSum' = F@_10, 'Time' = F@_11,
	       'UpdateTime' = F@_12, 'Link' = F@_13};
dfp_read_field_def_Message(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			   F@_11, F@_12, F@_13, TrUserData) ->
    dg_read_field_def_Message(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, TrUserData).

dg_read_field_def_Message(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Message(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dg_read_field_def_Message(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Message_Channel(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, TrUserData);
      16 ->
	  d_field_Message_Publisher(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, TrUserData);
      26 ->
	  d_field_Message_Protocol(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, TrUserData);
      34 ->
	  d_field_Message_Name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, TrUserData);
      42 ->
	  d_field_Message_Unit(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, TrUserData);
      49 ->
	  d_field_Message_Value(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, TrUserData);
      58 ->
	  d_field_Message_StringValue(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, F@_13, TrUserData);
      64 ->
	  d_field_Message_BoolValue(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, TrUserData);
      74 ->
	  d_field_Message_DataValue(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, TrUserData);
      81 ->
	  d_field_Message_ValueSum(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, TrUserData);
      89 ->
	  d_field_Message_Time(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, TrUserData);
      97 ->
	  d_field_Message_UpdateTime(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, TrUserData);
      106 ->
	  d_field_Message_Link(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    F@_12, F@_13, TrUserData);
	    1 ->
		skip_64_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				F@_12, F@_13, TrUserData);
	    2 ->
		skip_length_delimited_Message(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      F@_8, F@_9, F@_10, F@_11, F@_12,
					      F@_13, TrUserData);
	    3 ->
		skip_group_Message(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, TrUserData);
	    5 ->
		skip_32_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				F@_12, F@_13, TrUserData)
	  end
    end;
dg_read_field_def_Message(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, _) ->
    #'Message'{'Channel' = F@_1, 'Publisher' = F@_2,
	       'Protocol' = F@_3, 'Name' = F@_4, 'Unit' = F@_5,
	       'Value' = F@_6, 'StringValue' = F@_7,
	       'BoolValue' = F@_8, 'DataValue' = F@_9,
	       'ValueSum' = F@_10, 'Time' = F@_11,
	       'UpdateTime' = F@_12, 'Link' = F@_13}.

d_field_Message_Channel(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_Message_Channel(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_Channel(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Message(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData).

d_field_Message_Publisher(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_Message_Publisher(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_Publisher(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData).

d_field_Message_Protocol(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_Message_Protocol(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_Protocol(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Message_Name(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_Message_Name(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, TrUserData);
d_field_Message_Name(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Message_Unit(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_Message_Unit(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, TrUserData);
d_field_Message_Unit(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9,
			       F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Message_Value(<<0:48, 240, 127, Rest/binary>>,
		      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
		      F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, id(infinity, TrUserData), F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData);
d_field_Message_Value(<<0:48, 240, 255, Rest/binary>>,
		      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
		      F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, id('-infinity', TrUserData),
			       F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData);
d_field_Message_Value(<<_:48, 15:4, _:4, _:1, 127:7,
			Rest/binary>>,
		      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
		      F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, id(nan, TrUserData), F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData);
d_field_Message_Value(<<Value:64/little-float,
			Rest/binary>>,
		      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
		      F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, id(Value, TrUserData), F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData).

d_field_Message_StringValue(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_Message_StringValue(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_StringValue(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9,
			       F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Message_BoolValue(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_Message_BoolValue(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_BoolValue(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
			  F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9,
			       F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Message_DataValue(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_Message_DataValue(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_Message_DataValue(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  _, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue,
			       F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_Message_ValueSum(<<0:48, 240, 127,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, _, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       id(infinity, TrUserData), F@_11, F@_12, F@_13,
			       TrUserData);
d_field_Message_ValueSum(<<0:48, 240, 255,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, _, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       id('-infinity', TrUserData), F@_11, F@_12, F@_13,
			       TrUserData);
d_field_Message_ValueSum(<<_:48, 15:4, _:4, _:1, 127:7,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, _, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       id(nan, TrUserData), F@_11, F@_12, F@_13,
			       TrUserData);
d_field_Message_ValueSum(<<Value:64/little-float,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, _, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       id(Value, TrUserData), F@_11, F@_12, F@_13,
			       TrUserData).

d_field_Message_Time(<<0:48, 240, 127, Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		     F@_9, F@_10, _, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       id(infinity, TrUserData), F@_12, F@_13,
			       TrUserData);
d_field_Message_Time(<<0:48, 240, 255, Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		     F@_9, F@_10, _, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       id('-infinity', TrUserData), F@_12, F@_13,
			       TrUserData);
d_field_Message_Time(<<_:48, 15:4, _:4, _:1, 127:7,
		       Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		     F@_9, F@_10, _, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       id(nan, TrUserData), F@_12, F@_13, TrUserData);
d_field_Message_Time(<<Value:64/little-float,
		       Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		     F@_9, F@_10, _, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       id(Value, TrUserData), F@_12, F@_13, TrUserData).

d_field_Message_UpdateTime(<<0:48, 240, 127,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   F@_8, F@_9, F@_10, F@_11, _, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, id(infinity, TrUserData), F@_13,
			       TrUserData);
d_field_Message_UpdateTime(<<0:48, 240, 255,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   F@_8, F@_9, F@_10, F@_11, _, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, id('-infinity', TrUserData), F@_13,
			       TrUserData);
d_field_Message_UpdateTime(<<_:48, 15:4, _:4, _:1,
			     127:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   F@_8, F@_9, F@_10, F@_11, _, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, id(nan, TrUserData), F@_13, TrUserData);
d_field_Message_UpdateTime(<<Value:64/little-float,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   F@_8, F@_9, F@_10, F@_11, _, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, id(Value, TrUserData), F@_13, TrUserData).

d_field_Message_Link(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_Message_Link(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, TrUserData);
d_field_Message_Link(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, NewFValue, TrUserData).

skip_varint_Message(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    skip_varint_Message(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, TrUserData);
skip_varint_Message(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData).

skip_length_delimited_Message(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData)
    when N < 57 ->
    skip_length_delimited_Message(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, TrUserData);
skip_length_delimited_Message(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Message(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData).

skip_group_Message(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		   F@_13, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Message(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData).

skip_32_Message(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData).

skip_64_Message(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'RawMessage' ->
	  merge_msg_RawMessage(Prev, New, TrUserData);
      'Message' -> merge_msg_Message(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_RawMessage/3}).
merge_msg_RawMessage(#'RawMessage'{'Channel' =
				       PFChannel,
				   'Publisher' = PFPublisher,
				   'Protocol' = PFProtocol,
				   'ContentType' = PFContentType,
				   'Payload' = PFPayload},
		     #'RawMessage'{'Channel' = NFChannel,
				   'Publisher' = NFPublisher,
				   'Protocol' = NFProtocol,
				   'ContentType' = NFContentType,
				   'Payload' = NFPayload},
		     _) ->
    #'RawMessage'{'Channel' =
		      if NFChannel =:= undefined -> PFChannel;
			 true -> NFChannel
		      end,
		  'Publisher' =
		      if NFPublisher =:= undefined -> PFPublisher;
			 true -> NFPublisher
		      end,
		  'Protocol' =
		      if NFProtocol =:= undefined -> PFProtocol;
			 true -> NFProtocol
		      end,
		  'ContentType' =
		      if NFContentType =:= undefined -> PFContentType;
			 true -> NFContentType
		      end,
		  'Payload' =
		      if NFPayload =:= undefined -> PFPayload;
			 true -> NFPayload
		      end}.

-compile({nowarn_unused_function,merge_msg_Message/3}).
merge_msg_Message(#'Message'{'Channel' = PFChannel,
			     'Publisher' = PFPublisher, 'Protocol' = PFProtocol,
			     'Name' = PFName, 'Unit' = PFUnit,
			     'Value' = PFValue, 'StringValue' = PFStringValue,
			     'BoolValue' = PFBoolValue,
			     'DataValue' = PFDataValue, 'ValueSum' = PFValueSum,
			     'Time' = PFTime, 'UpdateTime' = PFUpdateTime,
			     'Link' = PFLink},
		  #'Message'{'Channel' = NFChannel,
			     'Publisher' = NFPublisher, 'Protocol' = NFProtocol,
			     'Name' = NFName, 'Unit' = NFUnit,
			     'Value' = NFValue, 'StringValue' = NFStringValue,
			     'BoolValue' = NFBoolValue,
			     'DataValue' = NFDataValue, 'ValueSum' = NFValueSum,
			     'Time' = NFTime, 'UpdateTime' = NFUpdateTime,
			     'Link' = NFLink},
		  _) ->
    #'Message'{'Channel' =
		   if NFChannel =:= undefined -> PFChannel;
		      true -> NFChannel
		   end,
	       'Publisher' =
		   if NFPublisher =:= undefined -> PFPublisher;
		      true -> NFPublisher
		   end,
	       'Protocol' =
		   if NFProtocol =:= undefined -> PFProtocol;
		      true -> NFProtocol
		   end,
	       'Name' =
		   if NFName =:= undefined -> PFName;
		      true -> NFName
		   end,
	       'Unit' =
		   if NFUnit =:= undefined -> PFUnit;
		      true -> NFUnit
		   end,
	       'Value' =
		   if NFValue =:= undefined -> PFValue;
		      true -> NFValue
		   end,
	       'StringValue' =
		   if NFStringValue =:= undefined -> PFStringValue;
		      true -> NFStringValue
		   end,
	       'BoolValue' =
		   if NFBoolValue =:= undefined -> PFBoolValue;
		      true -> NFBoolValue
		   end,
	       'DataValue' =
		   if NFDataValue =:= undefined -> PFDataValue;
		      true -> NFDataValue
		   end,
	       'ValueSum' =
		   if NFValueSum =:= undefined -> PFValueSum;
		      true -> NFValueSum
		   end,
	       'Time' =
		   if NFTime =:= undefined -> PFTime;
		      true -> NFTime
		   end,
	       'UpdateTime' =
		   if NFUpdateTime =:= undefined -> PFUpdateTime;
		      true -> NFUpdateTime
		   end,
	       'Link' =
		   if NFLink =:= undefined -> PFLink;
		      true -> NFLink
		   end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'RawMessage' ->
	  v_msg_RawMessage(Msg, [MsgName], TrUserData);
      'Message' -> v_msg_Message(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_RawMessage/3}).
-dialyzer({nowarn_function,v_msg_RawMessage/3}).
v_msg_RawMessage(#'RawMessage'{'Channel' = F1,
			       'Publisher' = F2, 'Protocol' = F3,
			       'ContentType' = F4, 'Payload' = F5},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_uint64(F1, ['Channel' | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_uint64(F2, ['Publisher' | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, ['Protocol' | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_string(F4, ['ContentType' | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, ['Payload' | Path], TrUserData)
    end,
    ok;
v_msg_RawMessage(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RawMessage'}, X, Path).

-compile({nowarn_unused_function,v_msg_Message/3}).
-dialyzer({nowarn_function,v_msg_Message/3}).
v_msg_Message(#'Message'{'Channel' = F1,
			 'Publisher' = F2, 'Protocol' = F3, 'Name' = F4,
			 'Unit' = F5, 'Value' = F6, 'StringValue' = F7,
			 'BoolValue' = F8, 'DataValue' = F9, 'ValueSum' = F10,
			 'Time' = F11, 'UpdateTime' = F12, 'Link' = F13},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_uint64(F1, ['Channel' | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_uint64(F2, ['Publisher' | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, ['Protocol' | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, ['Name' | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, ['Unit' | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_double(F6, ['Value' | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_type_string(F7, ['StringValue' | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
	   v_type_bool(F8, ['BoolValue' | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
	   v_type_string(F9, ['DataValue' | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true ->
	   v_type_double(F10, ['ValueSum' | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_double(F11, ['Time' | Path], TrUserData)
    end,
    if F12 == undefined -> ok;
       true ->
	   v_type_double(F12, ['UpdateTime' | Path], TrUserData)
    end,
    if F13 == undefined -> ok;
       true -> v_type_string(F13, ['Link' | Path], TrUserData)
    end,
    ok;
v_msg_Message(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Message'}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, 'RawMessage'},
      [#field{name = 'Channel', fnum = 1, rnum = 2,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = 'Publisher', fnum = 2, rnum = 3,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = 'Protocol', fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = 'ContentType', fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = 'Payload', fnum = 5, rnum = 6,
	      type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'Message'},
      [#field{name = 'Channel', fnum = 1, rnum = 2,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = 'Publisher', fnum = 2, rnum = 3,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = 'Protocol', fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = 'Name', fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = 'Unit', fnum = 5, rnum = 6, type = string,
	      occurrence = optional, opts = []},
       #field{name = 'Value', fnum = 6, rnum = 7,
	      type = double, occurrence = optional, opts = []},
       #field{name = 'StringValue', fnum = 7, rnum = 8,
	      type = string, occurrence = optional, opts = []},
       #field{name = 'BoolValue', fnum = 8, rnum = 9,
	      type = bool, occurrence = optional, opts = []},
       #field{name = 'DataValue', fnum = 9, rnum = 10,
	      type = string, occurrence = optional, opts = []},
       #field{name = 'ValueSum', fnum = 10, rnum = 11,
	      type = double, occurrence = optional, opts = []},
       #field{name = 'Time', fnum = 11, rnum = 12,
	      type = double, occurrence = optional, opts = []},
       #field{name = 'UpdateTime', fnum = 12, rnum = 13,
	      type = double, occurrence = optional, opts = []},
       #field{name = 'Link', fnum = 13, rnum = 14,
	      type = string, occurrence = optional, opts = []}]}].


get_msg_names() -> ['RawMessage', 'Message'].


get_group_names() -> [].


get_msg_or_group_names() -> ['RawMessage', 'Message'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('RawMessage') ->
    [#field{name = 'Channel', fnum = 1, rnum = 2,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = 'Publisher', fnum = 2, rnum = 3,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = 'Protocol', fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = 'ContentType', fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = 'Payload', fnum = 5, rnum = 6,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def('Message') ->
    [#field{name = 'Channel', fnum = 1, rnum = 2,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = 'Publisher', fnum = 2, rnum = 3,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = 'Protocol', fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = 'Name', fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = 'Unit', fnum = 5, rnum = 6, type = string,
	    occurrence = optional, opts = []},
     #field{name = 'Value', fnum = 6, rnum = 7,
	    type = double, occurrence = optional, opts = []},
     #field{name = 'StringValue', fnum = 7, rnum = 8,
	    type = string, occurrence = optional, opts = []},
     #field{name = 'BoolValue', fnum = 8, rnum = 9,
	    type = bool, occurrence = optional, opts = []},
     #field{name = 'DataValue', fnum = 9, rnum = 10,
	    type = string, occurrence = optional, opts = []},
     #field{name = 'ValueSum', fnum = 10, rnum = 11,
	    type = double, occurrence = optional, opts = []},
     #field{name = 'Time', fnum = 11, rnum = 12,
	    type = double, occurrence = optional, opts = []},
     #field{name = 'UpdateTime', fnum = 12, rnum = 13,
	    type = double, occurrence = optional, opts = []},
     #field{name = 'Link', fnum = 13, rnum = 14,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> mainflux.



gpb_version_as_string() ->
    "4.4.0".

gpb_version_as_list() ->
    [4,4,0].
